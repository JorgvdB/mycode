from PIL import Image
import os

def resize_and_add_white_bars(image, target_width=400, target_height=600):
    # Get the current dimensions of the image
    current_width, current_height = image.size
    
    # Calculate the scaling factors to fit the image within the target dimensions
    width_scale = target_width / current_width
    height_scale = target_height / current_height
    
    # Choose the smaller of the two scales to ensure the entire image fits
    scale = min(width_scale, height_scale)
    
    # Calculate the new dimensions
    new_width = int(current_width * scale)
    new_height = int(current_height * scale)
    
    # Resize the image proportionally
    img_resized = image.resize((new_width, new_height), Image.ANTIALIAS)
    
    # Create a new blank image with the target dimensions and white background
    final_image = Image.new("RGB", (target_width, target_height), (255, 255, 255))
    
    # Calculate the position to paste the resized image at the center
    left = (target_width - new_width) // 2
    top = (target_height - new_height) // 2
    
    # Paste the resized image onto the white canvas
    final_image.paste(img_resized, (left, top))
    
    return final_image

def process_images(input_dir, output_dir):
    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # List all files in the input directory
    file_list = os.listdir(input_dir)
    
    # Process each file in the input directory
    for filename in file_list:
        # Check if the file is an image (you may need to add more image file extensions)
        if filename.lower().endswith((".jpg", ".jpeg", ".png", ".gif")):
            input_path = os.path.join(input_dir, filename)
            output_path = os.path.join(output_dir, filename)
            
            # Open the image
            img = Image.open(input_path)
            
            # Resize and add white bars while maintaining aspect ratio
            final_image = resize_and_add_white_bars(img)
            
            # Save the final image in the output directory
            final_image.save(output_path)
            print(f"Saved resized image to {output_path}")

if __name__ == "__main__":
    input_directory = "pictures plain"  # Replace with the directory containing your images
    output_directory = "pictures cropped and recentered"  # Replace with the desired output directory
    process_images(input_directory, output_directory)
